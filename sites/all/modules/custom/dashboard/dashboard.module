<?php
// $Id$

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function dashboard_theme() {
  return array(
  );
} */

function dashboard_init() {
  // only bother when we are not serving a cached page. check for which function that only exists afterwards
  if (function_exists('drupal_set_content')) {
    // we have to perform a load in order to assure that the $user->og_groups bits are present.
    global $user;
    if ($user->uid) {
      $user = user_load(array('uid' => $user->uid));
    }
    else {
      $user->og_groups = array();
    }
  module_load_include('inc', 'dashboard', 'dashboard_views');
  }
}

/**
* Display help and module information
* @param path whitch path of the site we're displaying help
* @param arg array that holds the current path as vould be returned from arg() function
* @return help text for the path
*/
function dashboard_help($path, $arg){
  $output = '';
  switch($path){
  case "admin/modules#dashboard":
    case "admin/help#dashboard":
   // $output = '<p>'. t("Displays links to created on this date") . '</p>';
    break;
  case "user/help#dashboard":
  break;
  }
  return $output;
} // function dashboard

/**
* hook_perm
*/
function dashboard_perm() {
  return array(
    'import sites',
    'export sites',
  );
}


function dashboard_access_suggest_a_site($arg0, $arg1 = NULL) {
  if ($arg0 == 'greenmap' && !$arg1) {
    return FALSE;
  } 

  return TRUE;
}
/**
 *  implementation of hook_menu
 */
function dashboard_menu(){
  $items = array();
  $items['greenmap/suggest'] = array(
    'title' => 'Suggest a Site',
    'access arguments' => array('access content'),
    //'access callback' => 'dashboard_access_suggest_a_site', 
    //'access arguments' => array(0, 1),
    'page callback' => 'dashboard_suggest_site_world_map',
    'type' => MENU_LOCAL_TASK,
    'weight' => 8
  );
  $items['greenmap/view'] = array(
    'title' => 'World View',
    'access arguments' => array('access content'),
    'page callback' => 'dashboard_view_world_map',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['node/%dashboard_map/dashboard'] = array(
    'title' => 'Map Dashboard',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_leadmapmaker',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8
  );
  $items['node/%dashboard_map/members'] = array(
    'title' => 'Map Team',
    'access callback' => 'dashboard_access_admin_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_members',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  // add a Team Roles tab for og_user_roles management
//  $items['node/%dashboard_map/member_roles'] = array(
//    'title' => 'Team Roles',
//    'access callback' => 'dashboard_access_admin_callback',
//    'access arguments' => array(1),
//    'page callback' => 'dashboard_members_roles',
//    'page arguments'=> array(1),
//    'type' => MENU_LOCAL_TASK,
//    'weight' => 11,
//  );
  $items['node/%dashboard_map/add_site'] = array(
    'title' => 'Add a Site',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_add',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 12,
  );
  //FIXME: maybe don't hardcode this
  $green_route_type_name = 'green_route';
  //FIXME: need some test for existence of content type to hide this tab if
  //   content type gets disabled

  // this may be addressed by the second access argument, which checks if
  // poly fields are enabled on the map.-- ncm
  $items['node/%dashboard_map/add_route'] = array(
    'title' => 'Add a Route',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1, TRUE),
    'page callback' => 'dashboard_add',
    'page arguments'=> array(1, $green_route_type_name),
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
  );
  //FIXME: maybe don't hardcode this
  $green_area_type_name = 'green_area';
  $items['node/%dashboard_map/add_area'] = array(
    'title' => 'Add an Area',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1, TRUE),
    'page callback' => 'dashboard_add',
    'page arguments'=> array(1, $green_area_type_name),
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
  );
  $items['node/%dashboard_map/export'] = array(
    'title' => 'Import/Export',
    'access callback' => 'dashboard_access_admin_callback_export',
    'access arguments' => array(1),
    'page callback' => 'dashboard_import_export',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 14,
  );
  return $items;
}

function dashboard_map_load($nid) {
  $map_type = 'green_map';
  if ( is_numeric($nid) &&
       ($node = node_load($nid)) &&
       $node->type == $map_type )
  {
    return $node->nid;
  }
  else  {
    return FALSE;
  }
}

/*
 * hook_menu -calls these functions
 */

function dashboard_suggest_site_world_map() {
  $output = '<p>'. t("Thank you! This World View map is the only Open Green Map which <strong>does not yet accept public site suggestions</strong>.") .'</p>'.
    '<p>'. t('Your suggestions are welcome on any other map. Please click <a href="@maps-link">Maps</a> on the top menu bar and select the map of your city or region. Then, click Suggest a Site.', array('@maps-link' => url('maps'))) .'</p>'.
    '<p>'. t("Another way to get to the map you want: <br> On the World View map, select a green site in your area. Each is linked to its map. Click the blue title by the map symbol near the bottom of the info window.") .'</p>';
  return $output;
}

function dashboard_view_world_map(){
  drupal_goto('greenmap');
}

function dashboard_add($nid, $type='green_site'){
  //drupal_goto('node/add/green_site', 'gids[]=' . $nid);
  drupal_goto("node/add/$type", 'gids[]=' . $nid);
}

function dashboard_ogur_access($string, $gid, $uid) {
  $f = 'og_user_roles_user_access';
  if ( function_exists($f) ) {
    return call_user_func_array($f, array($string, $gid, $uid));
  } else {
    return FALSE;
  }
}

function dashboard_import_export($nid) {
  global $user;
  $content = '';

  if ( user_access('export sites') || dashboard_ogur_access('export sites', $nid, $user->uid) ) {
    $content .= "<p><strong>" . t("Importing and Exporting") . "</strong></p>";
    $content .= "<p>" . t("This page provides data for this specific map. Only logged-in Mapmakers can access this page.") . "</p>";
    $content .= "<p><strong>" . t("Import from Mobile Site Collector") . "</strong></p>";
    $content .= "<p>" . t("Did you get an email about suggested sites from the Mobile Site Collector?") . "</p>";
    $content .= "<p>" . l(t('Import from the Mobile Site Collector'), 'node/' . $nid . '/webappimport', 
      array('query' => array('map' => $nid))) . "</p>";
    $content .= "<p>" . t("Go to your Mobile Import page to instantly move this new data onto your Open Green Map and Map 
      Dashboard. You can also delete inappropriate sites.") . "</p>";
    $content .= "<p>" . t("The person who collected the site will receive an email automatically. You will receive a copy 
      and can send them a personal message, too. ") . "</p>";
    $content .= "<p>" . t("Once imported, the site will appear like any other on OGM. We recommend that you check the site, 
      editing details and location, and so on, as needed. ") . "</p>";
    $content .= "<p><strong>". t("Map Export") ."</strong></p>";
    $content .= "<p>" . t("Export your sites in two formats. Note that photos, videos and comments are not exported. 
      No lines or areas.") . "</p>";
    $content .= "<p><strong>". t("Want a CSV file?") ."</strong></p>";
    $content .= "<p>" . t("Export all Green Sites on this map as a CSV file, for use with spreadsheet and database software. Text in these files is encoded using the Unicode character set UTF-8. In particular, you may need to set your spreadsheet or GIS software to open the CSV file using UTF-8.") . "</p>";
    $content .= "<p>" . t('<a href="@csv_export_link">Export Map Data as <abbr title="Comma Separated Variable">CSV</abbr> file</a>', array('@csv_export_link' => url('dashboard/sites/'. $nid .'/map_export.csv'))) . "</p>";
    $content .= "<p><strong>". t("Want a KML file?") ."</strong></p>";
    $content .= "<p>" . t("For use with mapping application, including GIS and Google Earth. 
      The KML file contains each site's name, location, a brief description, and a link to 
      this website for users who would like to read the site's full description.") . "</p>";
    $content .= "<p>" . t('<a href="@kml_export_link">Export Map Data as <abbr title="Keyhole Markup Language">KML</abbr> file</a> or <a href="@kml_export_label_link"><abbr title="Keyhole Markup Language">KML</abbr> file with icon labels</a> (for use with mapping software such as Google Earth)', array('@kml_export_link' => url('dashboard/sites/'. $nid .'/map_export.kml'), '@kml_export_label_link' => url('dashboard/sites/'. $nid .'/map_export_labels.kml'))) . "</p>";
    $content .= "<p><strong>". t("Tutorial") . "</strong></p>";
    $content .= "<p>". t('Learn how to properly open the CSV and KML for use in spreadsheets or Geographical Information Systems (GIS) by <a href="http://GreenMap.org/greenhouse/files/OGM_export_tutorial_1-2010.pdf">accessing our tutorial</a>.') ."</p>";
    $content .= "<p><strong>". t("Data Import") . "</strong></p>";
    $content .= "<p>". t('Other than from the Mobile Site Collector, Data Import is currently Not Available, as of winter 2014.
      A new process is in development. If you have GIS and coding skills and want to volunteer on this process, please send 
      us a note.') . "</p>";
    $content .= "<p>" . t('Updates will be announced as soon as possible, thank you for your patience!') . "</p>";
  }
  return $content;
}

function dashboard_leadmapmaker($nid){
  $node = node_load($nid);
  drupal_add_js("misc/collapse.js");
  drupal_set_title(t('Map Dashboard for %group', array('%group' => $node->title)));
  $content .= "<p>" . t('Use this page to manage sites on the map. You can also use the <a href="@advanced-mapboard">advanced Map Dashboard</a>, which lets you filter and search.', array('@advanced-mapboard' => url('advanced/' . $node->nid))) . "</p>";
  // add in new bulk edit link
  $content .= "<p>" . t('You can also use the <a href="@bulk-mapboard">Bulk Edit View</a>, which will let you edit some details of your sites in an easier interface.', array('@bulk-mapboard' => url('dashboard/sites/bulk/' . $node->nid))) . "</p>"; 
  $views_to_embed = array(
    array(
      'view' => 'dashboard_sites',
      'title' => t('Published Sites') .': ',
      'display' => 'page_1',
    ),
    array(
      'view' => 'dashboard_sites',
      'title' => t('Suggested Sites') .': ',
      'display' => 'page_2',
    ),
    array(
      'view' => 'dashboard_sites',
      'title' => t('Unpublished Sites') .': ',
      'display' => 'page_3',
    ),
    array(
      'view' => 'flagged_sites',
      'title' => t('Flagged Sites') .': ',
      'display' => 'default',
    ),
    array(
      'view' => 'comments',
      'title' => t('Comments') .': ',
      'display' => 'default',
    ),
    array(
      'view' => 'dashboard_multimedia',
      'title' => t('Videos') .': ',
      'display' => 'page_1',
    ),
    array(
      'view' => 'dashboard_photos',
      'title' => t('Photos Awaiting Approval') .': ',
      'display' => 'page_2',
    ),
    array(
      'view' => 'dashboard_photos',
      'title' => t('Photos') .': ',
      'display' => 'page_1',
    ),
    // TODO:
      // add the 'dashboard_list_all_flags' view
  );

  foreach ( $views_to_embed as $ve ) {
    if ( $fun = $ve['access'] ) {
      if ( !($fun()) ) {
        continue;
      }
    }
    $content .= "<h3>".$ve['title']."</h3>";
    $content .= "<div style='overflow:auto;max-height:150px;'>";
    $content .= views_embed_view($ve['view'], $ve['display'], $node->nid);
    $content .= "</div>";
  }
  return $content;
}

/*
 * Redirect admins to the member admin page
 */
function dashboard_members($gid){
  return views_embed_view('dashboard_team', 'page', $gid);
}

/*
 * Redirect admins to the member admin page
 */
function dashboard_members_roles($gid){
  drupal_goto("og/users/$gid/roles");
}


/*
 * TODO: check these for correctness
 */
function dashboard_access_admin_callback_export($group_nid = 0) {
  return dashboard_access_admin_callback($group_nid, TRUE);
}

/*
 * TODO: check these for correctness
 */
function dashboard_access_admin_callback($group_nid = 0, $import_export = FALSE) {
  global $user;
  if ( !$user->uid ) {
    return FALSE;
  }
  else if ( ! $group_nid ) {
    return FALSE;
  }
  else {
    if (in_array('admin', array_values($user->roles))) {
      return TRUE;
    }
  
    $group_node = node_load($group_nid);
    return og_is_group_member($group_node) && user_access('export sites') && 
      dashboard_ogur_access('export sites', $group_nid, $user->uid);
  }
}

function dashboard_access_member_callback($group_nid = NULL, $poly = FALSE) {
  global $user;
  if ( !$user->uid ) {
    return FALSE;
  }
  else if ( ! $group_nid ) {
    return FALSE;
  }
  else {
    $node = node_load($group_nid);
    if ($poly) {
      if ($node->field_use_poly[0]['value'] == 'Yes') {
        return og_is_group_member($node);
      }
      else {
        return FALSE;
      }
    }
    else {
      return og_is_group_member($node);
    }
  }
}

/*
 * the old code had !(user_access('create green_site content')), which doesn't
 * work well with the new d6 callback/arguments model
 *
 *  TODO: do something different entirely, because this is convoluted
 */
function dashboard_access_callback_not($acc) {
  return
    ! user_access($acc);
}

function dashboard_views_api() {
  return array('api' => 2.0,);
}
