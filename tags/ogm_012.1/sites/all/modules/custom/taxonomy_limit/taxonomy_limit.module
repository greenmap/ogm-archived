<?php
// $Id: taxonomy_limit.module,v 1.5.2.2 2007/01/30 05:51:46 codexmas Exp $

/**
* @desc Menu hook
*/
function taxonomy_limit_menu() {
  $items['admin/settings/taxonomy_limit'] = array(
    'title'               => 'Taxonomy Limit',
    'description'         => 'Limit terms selected in a vocabulary.',
    'page callback'       => 'drupal_get_form',
    'page arguments'      => array('taxonomy_limit_settings'),
    'access arguments'    => array('administer taxonomy'),
    'type'                => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
*@desc This function preforms the magic to add the validation on the
* form level, not the element level.  It also appends the description
* of the category to provide a useful hint on the limit.
*/
function taxonomy_limit_form_alter(&$form, $form_state, $form_id) {
  // Make sure this form is for editing a node
  if (!($form['type'] && is_array($form['type']) && $form['type']['#value'])) {
    return;
  }
  // Get the content types we are allowed to work with, if set
  if (!$limit_types = variable_get('taxonomy_limit_types', NULL)) {
    return;
  }
  // Is this a node type that has been selected?
  if ($limit_types[$form['#node']->type] .'_node_form' != $form_id) {
    return;
  }

  // Load the validation data for the content type
  if ($tax_limit = variable_get('taxonomy_limit_'. $form['#node']->type, NULL)) {
    $validate = FALSE;
    // Go through each configured category
    foreach ($tax_limit AS $vid => $data) {
      $max = $data['max'];
      // Only allow numbers greater than zero (disabled)
      if (!(is_numeric($max) && $max > 0)) {
        continue;
      }
      // Validate that this category still meets the criteria
      if (taxonomy_limit_validate_vocabulary($vid)) {
        $validate = TRUE;
        $desc = " <strong>".
          t("(Choose up to @max)", array("@max" => taxonomy_limit_number($max)))
          ."</strong>";
        if (is_array($form['taxonomy']['tags'][$vid])) {
          $form['taxonomy']['tags'][$vid]['#description'] .= $desc; 
        }
        else {
          $form['taxonomy'][$vid]['#description'] .= $desc;
        }
      }
    }
    // Only set validation callback if limits have been set.
    if ($validate) {
      $form['#validate'][] = '_taxonomy_limit_validate_max_terms';
    }
  }
}

/**
*@desc Here is the function the creates the error for the category form element.
* We are passed the $all string, which is a concatenated vid/max series of entries
* seperated by a single pipe.
*/
//function _taxonomy_limit_validate_max_terms($form_id, $edit, $form, $all) {
function _taxonomy_limit_validate_max_terms($form, &$form_state) {
  // Fetch all limits for vocabs for this type
  $tax_limit = variable_get('taxonomy_limit_'. $form['#node']->type, NULL);
  // Loop through all the vocabulary validation items
  foreach ($tax_limit AS $vid => $data) {
    $max = $data['max'];
    // Only allow numbers greater than zero (disabled)
    if (!(is_numeric($max) && $max > 0)) {
      continue;
    }
    // Validate once again that this vid meets the criteria
    if (!taxonomy_limit_validate_vocabulary($vid)) {
      continue;
    }
    // Create error message
    if ($tax_limit[$vid]['error']) {
      // TODO use hook_locale() here; calling t() on user input is incorrect
      $error = t($tax_limit[$vid]['error']);
    }
    else {
      // default error message
      $vocab = taxonomy_vocabulary_load($vid);
      $error = t('Too many terms selected for @name', array('@name' => $vocab->name));
    }
    // After node has been saved, and is being edited...
    if ($tags = $form['taxonomy']['tags'][$vid]['#value']) {
      if (count(explode(',', $tags)) > $max) {
        form_set_error("taxonomy][tags][$vid", $error);
      }
    }
    // Non freetagging vocabulary
    if (sizeof($form['taxonomy'][$vid]['#value']) > $max) {
      form_set_error("taxonomy][$vid", $error);
    }
  }
}

function taxonomy_limit_validate_vocabulary(&$vid, &$terms = array()) {
  // Were we passed a vid?
  if (!is_numeric($vid)) {
    return FALSE;
  }
  $vocab = taxonomy_vocabulary_load($vid);
  // did the vocab load properly?
  if (!is_object($vocab)) {
    return FALSE;
  }
  // must allow multiple selections
  if (!$vocab->multiple) {
    return FALSE;
  }
  // indicate that this is a freetagging vocab, and populates the $terms by ref
  if ($vocab->tags) {
    if (!$terms[$vid]) {
      $terms[$vid] = taxonomy_get_children(NULL, $vid);
    }
  }
  // All good, allow this category
  return TRUE;
}

function taxonomy_limit_settings() {
  drupal_add_css(drupal_get_path('module', 'taxonomy_limit') .'/style.css');
  $types = node_get_types('names');
  $limit_types = variable_get('taxonomy_limit_types', NULL);
  $form['taxonomy_limit_types'] = array(
    '#type'           => 'checkboxes',
    '#options'        => $types,
    '#title'          => t('Apply to content type'),
    '#default_value'  => $limit_types,
    '#description'    =>
      t("Only vocabularies that have the multiple option enabled are affected by this module.")
      ."<br /><br /><em>".
      t("Setting a maximum of <strong>zero</strong> for a category will disable the maximum check.")
      ."</em>",
  );
  if ($limit_types) {
    foreach ($limit_types AS $key => $type) {
      if (!is_numeric($type)) {
        $form['settings']['taxonomy_limit_types']['taxonomy_limit_'. $type] = array(
          '#type'   => 'fieldset',
          '#title'  => t('Maximum number of terms for %type content type', array('%type' => $type)),
          '#tree'   => TRUE,
        );
        $vocabs = taxonomy_get_vocabularies($type);
        if ($vocabs) {
          $tax_limit = variable_get('taxonomy_limit_'. $type, NULL);
          $invalid_count = 0;
          foreach ($vocabs AS $vid => $vocab) {
            $dummy = array(0 => 0);
            if (!taxonomy_limit_validate_vocabulary($vid, $dummy)) {
              $invalid_count++;
              continue;
            }
            $form['settings']['taxonomy_limit_types']['taxonomy_limit_'. $type][$vid]['max'] = array(
              '#prefix'         => '<div class="taxonomy_limit_types">',
              '#title'          => $vocab->name,
              '#type'           => 'textfield',
              '#size'           => 4,
              '#default_value'  => $tax_limit[$vid]['max'] ? $tax_limit[$vid]['max'] : '',
            );
            $form['settings']['taxonomy_limit_types']['taxonomy_limit_'. $type][$vid]['error'] = array(
              '#title'          => t('Error Message'),
              '#type'           => 'textfield',
              '#size'           => 60,
              '#default_value'  => $tax_limit[$vid]['error'] ? $tax_limit[$vid]['error'] : '',
              '#suffix'         => '</div>',
            );
          }
          if ($invalid_count == count($vocabs)) {
            $form['settings']['taxonomy_limit_types']['taxonomy_limit_'. $type][$vid] = array(
              '#value' => t('None of the vocabularies defined for this content type are valid.')
              .'<br />',
            );
          }
        }
        else{
            $form['settings']['taxonomy_limit_types']['taxonomy_limit_'. $type][$vid] = array(
              '#value' => t('There are no vocabularies defined for this content type.')
              .'<br />',
            );

        }
      }
    }
  }
  return system_settings_form($form);
}

function taxonomy_limit_number($number) {
  $numbers = array(
    0   => t('zero'),
    1   => t('one'),
    2   => t('two'),
    3   => t('three'),
    4   => t('four'),
    5   => t('five'),
    6   => t('six'),
    7   => t('seven'),
    8   => t('eight'),
    9   => t('nine'),
    10  => t('ten'),
    11  => t('eleven'),
    12  => t('twelve'),
    13  => t('thirteen'),
    14  => t('fourteen'),
    15  => t('fifteen'),
    16  => t('sixteen'),
    17  => t('seventeen'),
    18  => t('eighteen'),
    19  => t('nineteen'),
    20  => t('twenty'),
  );
  // Return the original number if we don't have it in the list.
  if (!$numbers[$number]) {
    return $number;
  }
  // Return the word for the number provided
  return $numbers[$number];
}
