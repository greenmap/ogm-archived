<?php

/**
 * hook_menu()
 * create a callback url to get the count - easiest way to access it in JS I think
 */

function sms_menu($may_cache){
	$items = array();
	if ($may_cache) {
  
		
	} else {
		$items[] = array(
	      'path' => 'sms', 
	      'title' => t('SMS Query'),
	      'callback' => 'sms_lookup',
		  'callback_arguments' => arg(1),
	      'type' => MENU_CALLBACK,
	      'access' => TRUE,
	    );
	}
	return $items;
}

function sms_lookup($arg=NULL){
	// echo $_GET[address];
	// echo 'hello world';
	
	//Three parts to the querystring: q is address, output is the format, key is the GAPI key
	$key = variable_get('googlemap_api_key','ABQIAAAA1P6vBz0CKnLVelm4sfu7shT2yXp_ZAY8_ufC3CFXhHIE1NvwkxTrGJODvKAg_vTWRxila0Fn6T6FVA');
	//$address = urlencode("columbia MO");
	
	$address = urlencode($_GET[address]);
	// echo $address;
	//If you want an extended data set, change the output to "xml" instead of csv
	$url = "http://maps.google.com/maps/geo?q=".$address."&output=xml&key=".$key;
	//Set up a CURL request, telling it not to spit back headers, and to throw out a user agent.
	$ch = curl_init();
	 
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HEADER,0); //Change this to a 1 to return headers
	curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER["HTTP_USER_AGENT"]);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);
	 
	$data = curl_exec($ch);
	curl_close($ch);
  $data = xml2ary($data);
  print_r($data);
	 
	//echo "Data: ". $data . ' end ' ;
  //echo "Code: ". substr($data,0,3) . ' end ' ;
	// echo $data->postalcodenumber;
	die();
	
	//Check our Response code to ensure success
	if (substr($data,0,3) == "200")
	{
		$data = explode(",",$data);
		 
		$precision = $data[1];
		$latitude = $data[2];
		$longitude = $data[3];
	 
	} else {
		echo "Could not understand your address, sorry! Http error ".substr($data,0,3);
		echo $address;
		echo $latitude . ',' . $longitude;
		die();
	}	
	
	// stick lat & long into our database query
	drupal_goto($path = 'sms_list', $query = 'op0=1&latitude=' . $latitude . '&longitude=' . $longitude);
	
	// die();
}

/*
    Working with XML. Usage: 
    $xml=xml2ary(file_get_contents('1.xml'));
    $link=&$xml['ddd']['_c'];
    $link['twomore']=$link['onemore'];
    // ins2ary(); // dot not insert a link, and arrays with links inside!
    echo ary2xml($xml);
*/

// XML to Array
function xml2ary(&$string) {
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parse_into_struct($parser, $string, $vals, $index);
    xml_parser_free($parser);

    $mnary=array();
    $ary=&$mnary;
    foreach ($vals as $r) {
        $t=$r['tag'];
        if ($r['type']=='open') {
            if (isset($ary[$t])) {
                if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
                $cv=&$ary[$t][count($ary[$t])-1];
            } else $cv=&$ary[$t];
            if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
            $cv['_c']=array();
            $cv['_c']['_p']=&$ary;
            $ary=&$cv['_c'];

        } elseif ($r['type']=='complete') {
            if (isset($ary[$t])) { // same as open
                if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
                $cv=&$ary[$t][count($ary[$t])-1];
            } else $cv=&$ary[$t];
            if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
            $cv['_v']=(isset($r['value']) ? $r['value'] : '');

        } elseif ($r['type']=='close') {
            $ary=&$ary['_p'];
        }
    }    
    
    _del_p($mnary);
    return $mnary;
}

// _Internal: Remove recursion in result array
function _del_p(&$ary) {
    foreach ($ary as $k=>$v) {
        if ($k==='_p') unset($ary[$k]);
        elseif (is_array($ary[$k])) _del_p($ary[$k]);
    }
}

// Array to XML
function ary2xml($cary, $d=0, $forcetag='') {
    $res=array();
    foreach ($cary as $tag=>$r) {
        if (isset($r[0])) {
            $res[]=ary2xml($r, $d, $tag);
        } else {
            if ($forcetag) $tag=$forcetag;
            $sp=str_repeat("\t", $d);
            $res[]="$sp<$tag";
            if (isset($r['_a'])) {foreach ($r['_a'] as $at=>$av) $res[]=" $at=\"$av\"";}
            $res[]=">".((isset($r['_c'])) ? "\n" : '');
            if (isset($r['_c'])) $res[]=ary2xml($r['_c'], $d+1);
            elseif (isset($r['_v'])) $res[]=$r['_v'];
            $res[]=(isset($r['_c']) ? $sp : '')."</$tag>\n";
        }
        
    }
    return implode('', $res);
}

// Insert element into array
function ins2ary(&$ary, $element, $pos) {
    $ar1=array_slice($ary, 0, $pos); $ar1[]=$element;
    $ary=array_merge($ar1, array_slice($ary, $pos));
}
