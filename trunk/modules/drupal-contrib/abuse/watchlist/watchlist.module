<?php
// $Id: watchlist.module,v 1.4 2007/04/11 15:55:33 btmash Exp $

/*
 * Implementation of hook_help()
 */
function watchlist_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Checks for words as part of a watchlist and adds them to the abuse backend for verification');
  }
}

/**
 * Implementation of hook_perm
 */
function watchlist_perm() {
  return array('administer watchlist words');
}

/**
 * Implementation of hook_menu()
 */
function watchlist_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    return $items;    
  } else {
    $items[] = array( 'path' => 'admin/settings/watchlist',
                      'title' => t('Watchlist Settings'),
                      'description' => t('Area to enter a regular expression of all watchlist content'),
                      'callback' => 'drupal_get_form',
                      'callback arguments' => 'watchlist_settings_form',
                      'access' => user_access('administer watchlist words')
    );
  }
  return $items;
}

/**
 * Implementation of hook_settings
 */
function watchlist_settings_form() {
  $form = array();
  $form['watchlist_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Watch list'),
    '#cols' => 40,
    '#rows' => 10,
    '#default_value' => variable_get("watchlist_words", ''), 
    '#description' => t('The watch list, one per line')
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_nodeapi
 */
function watchlist_nodeapi(&$node, $op, $a3, $a4) {
  if (($op == 'insert' || $op == 'update') && variable_get(ABUSE_CONTENT_NODE_TYPE . $node->type, 0)) {
    $title = $node->title;
    $teaser = $node->teaser;
    $body = $node->body;
    
    $matches = array_merge(watchlist_checklist($title), 
                           watchlist_checklist($teaser),
                           watchlist_checklist($body)
                          );

    if (sizeof($matches) > 0) {
      _abuse_report_generated('node', $node->nid, $matches, 0);
    }
  }
}

/**
 * Implementation of hook_comment
 */
function watchlist_comment(&$comment, $op) {
  if ($op == 'insert' || $op == 'update') {
    $subject = $comment['subject'];
    $commented = $comment['comment'];
    $matches = array_merge(watchlist_checklist($subject), 
                           watchlist_checklist($commented));
    if (sizeof($matches) > 0) {
      _abuse_report_generated('comment', $comment['cid'], $matches, 0);
    }
  }
}

/**
 * Find out if the node variables contain anything
 * @param $text the text to check for watchlist words
 * @return an array with different content if matches are found with text, empty array otherwise
 */
function watchlist_checklist($text) {
  if (variable_get('watchlist_words', '') == '') {
    return array();
  }
  $words = explode("\n", variable_get("watchlist_words", ''));
  //Use what is already readily available thanks to the badwords module
  $replacement = '$|$|$|$';
  for ($i = 0; $i < count($words); $i++) {
    $words[$i] = '/' . trim($words[$i]) . '/i';
    $replacements[$i] = $replacement;
  }
  $output = $text;
  $output =  preg_replace($words, $replacements, $output);
  if (strcmp($output, $text) != 0) {
    $array1 = split(' ', $text);
    $array2 = split(' ', $output);
    $diff = array_diff($array1, $array2);
    return $diff;
  }
  return array();
}

/**
 * Implementation of hook_filter
 */
function watchlist_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Badwords filter'));
    case 'description':
      return t('Allows filtering for bad words.  Uses words from the watchlist settings.');
    case 'process':
      $words = explode("\n", variable_get("watchlist_words", ''));
      $replacement = variable_get("badwords_replacement_$format", '');
      for ($i = 0; $i < count($words); $i++) {
        $words[$i] = '/' . trim($words[$i]) . '/i';
        $replacements[$i] = $replacement;
      }

      $output = $text;
      //$output = _watchlist_phone($output);
      //$output = _watchlist_email($output);

      $output =  preg_replace($words, $replacements, $output);

      return $output;
    case 'settings':
      $form = array();
      // Uncomment the below lines if you want the filter words to be different from the main watchlist words
      // $form["badwords_words_$format"] = array(
      //   '#title' => t('Word List'),
      //   '#type' => 'textarea',
      //   '#rows' => 10,
      //   '#cols' => 40,
      //   '#default_value' => variable_get("badwords_words_$format", ''),
      //   '#description' => t('The list of words to check for, one per line'),
      // );
      $form["badwords_replacement_$format"] = array(
        '#title' => t('Replacement string'),
        '#type' => 'textfield',
        '#size' => 40,
        '#maxlength' => 40,
        '#default_value' => variable_get("badwords_replacement_$format", '****'),
        '#description' => t('The list of words to check for, one per line'),
      );
      return $form;
    default:
      return $text;
  }
}