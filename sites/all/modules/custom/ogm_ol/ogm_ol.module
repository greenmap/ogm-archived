<?php

/**
 * Implementation of hook_form_alter().
*/

function ogm_ol_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'green_route_node_form' || $form_id == 'green_area_node_form') {

    // need to get lat, lon & center for map
    $node = $form['#node'];
    if ( is_array($node->og_groups) ) {
      // "current()" returns the first element
      $nodegid = current($node->og_groups);
    }
    $gid = $_GET['gids'][0] ? $_GET['gids'][0] : $nodegid;
    $groupnode = node_load($gid);
    $groupmap_settings = array(
      'lat' => $groupnode->location['latitude'],
      'lon' => $groupnode->location['longitude'],
      'zoom' => $groupnode->field_map_zoom[0]['value'],
      'maptype' => $groupnode->field_gmap_type[0]['value'],
    );
    // set a variable to be used by the map_alter hook.
    variable_set('ogm_ol_groupmap_settings', $groupmap_settings);
  }
}

/**
 * Implementation of hook_openlayers_map_alter().
 */
function ogm_ol_openlayers_map_alter(&$map = array()) {
  // pull in the group map data.
  $groupmap = variable_get('ogm_ol_groupmap_settings', NULL);

  // determine the proper gmap type string.
  $default_layer = ogm_ol_gmap_maptype($groupmap['maptype']);

  // since the Drupal OL implementatin currently has trouble with
  // zooms higher tha 15, zoom out to 15 if higher than that.
  if ($groupmap['zoom'] > 15) {
    $zoom = 15;
  }
  else {
    $zoom = $groupmap['zoom'];
  }
  // set values for the map about to be displayed.
  $map['center']['lat'] = $groupmap['lat'];
  $map['center']['lon'] = $groupmap['lon'];
  $map['center']['zoom'] = $zoom;
  $map['default_layer'] = $default_layer;

  // remove the variable to keep it from being used on another map.
  variable_del('ogm_ol_groupmap_settings');
}

/**
 * Helper function to change OGM map type to OL default layer
 */
function ogm_ol_gmap_maptype($groupmaptype) {
  // currently the CCK field that defines this only supports Sattelite and Street
  // this function will need to be updated if that ever changes --ncm
  switch ($groupmaptype) {
    case 'Map':
      $layer = 'openlayers_layers_google_street';
      break;
    case 'Satellite':
      $layer = 'openlayers_layers_google_satellite';
      break;
  }
  return $layer;
}

/**
 * Implementation of hook_init().
 */
function ogm_ol_init() {
  $path = drupal_get_path('module', 'ogm_ol');
  drupal_add_js($path .'/ogm_ol.js', 'module', 'footer');
}

/**
 * Implementation of hook_nodeapi().
 */
function ogm_ol_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      ogm_ol_load_lines_js($node);
      ogm_ol_load_areas_js($node);
      break;
  }
}

/**
 * Helper function to create an array containing all the colors fo polygons
 *
 * @param $tid (optional) The term id of a poly type
 * @return the hexicdecimal color value of a tid, or an array of tids
 *   and color values if no $tid is supplied.
 * @TODO - turn this into something configurable in the UI
 */
function ogm_ol_load_poly_colors($tid = NULL) {
  $colors = array(
    '312' => '#33cccc', // walking
    '309' => '#0000cc', // cycling
    '313' => '#0099ff', // PUblic transport
    '318' => '#009900', // eco tour
    '317' => '#006600', // natural corridor
    '311' => '#ff3300', // cultural tour
    '314' => '#ff0099', // historical feature
    '324' => '#66ccff', // Mobility zone
    '325' => '#9966ff', //hazards & challenges
    '328' => '#00ff00', // green space
    '329' => '#339966', // protected area
    '330' => '#99ff00', // future redev
    '332' => '#ff6600', // cultural zone
    '321' => '#ff0000', // green map boundary
  );
  if ($tid) {
    return $colors[$tid];
  }
  else {
    return $colors;
  }
}
/**
 * function to create an array containing all the colors
 * @TODO - turn this into something configurable in the UI
 */
function ogm_ol_load_line_opacities($tid = NULL) {
  $opacs = array(
    '312' => '1', // walking
    '309' => '0.5', // cycling
    '313' => '1', // PUblic transport
    '318' => '1', // eco tour
    '317' => '0.8', // natural corridor
    '311' => '1', // cultural tour
    '314' => '1', // historical feature
    '324' => '0.4', // Mobility zone
    '325' => '0.5', //hazards & challenges
    '328' => '0.5', // green space
    '329' => '0.5', // protected area
    '330' => '0.8', // future redev
    '332' => '0.6', // cultural zone
    '321' => '0.6', // green map boundary
  );
  if ($tid) {
    return $opacs[$tid];
  }
  else {
    return $opacs;
  }
}

function ogm_ol_load_area_opacities($tid = NULL) {
  $opacs = array(
    '321' => '0', // green map boundary
  );
  if ($tid) {
    return $opacs[$tid];
  }
  else {
    return $opacs;
  }
}

/**
 * Build the key for the lines & areas
 */
function ogm_ol_key_build() {
  // loop through taxonomy turning it into an un-ordered nested list
  $key = array(ogm_ol_getKeyList(taxonomy_get_tree(5)), ogm_ol_getKeyList(taxonomy_get_tree(7)));
  return $key;
}

function ogm_ol_getKeyList($terms) {
  $nested_terms = ogm_ol_nest_terms($terms);
  $output = '';
  $output .= '<li id="key_genre_title_'. $nested_terms['vocab']['vid'] .'" class="key_genre_title">
        <div class="key_title" onclick="javascript:toggleGenre(\'key_genre_content_'. $nested_terms['vocab']['vid'] .'\', \'key_genre_title_'. $nested_terms['vocab']['vid'] .'\');"><a><span title="'. $nested_terms['vocab']['description'] .'">'. t($nested_terms['vocab']['name']) .'</span></a>
        </div>
        <div class="key_checkbox"><input type="checkbox" id="key_checkbox_genre_'.$nested_terms['vocab']['vid'] .'" class="key_checkbox_genre" checked></input>
        </div>';

  $output .= '<ul id="key_genre_content_'.$nested_terms['vocab']['vid'].'" class="key_genre_content">';

  foreach ($nested_terms as $catid => $category) {
    if (is_numeric($catid)) {
      $output .= '<li id="key_category_title_'.$catid.'" class="key_category_title key_expanded">';
      $output .= '<div class="key_title" onclick="javascript:toggleElement(\'key_category_content_'.$catid.'\', \'key_category_title_'.$catid.'\');"><a><span title="'. $category['desc'] .'">' . t($category['name']) . '</span></a>
        </div>';
      $output .= '<div class="key_checkbox"><input type="checkbox" id="key_checkbox_category_'.$catid.'" class="key_checkbox_category" checked></input>
        </div>';
      $output .= '<div id="key_category_content_'.$catid.'" class="key_category_content">';

      foreach ($category as $key => $info) {
        if (is_numeric($key)) {
          $output .= '<span id="key_icon_'.$key.'" class="key_icon" title="'. $info->desc .'">' .taxonomy_image_display($key, NULL, NULL, array('resize' => '1', 'width' => '21', 'height' => '18', 'imagecache_preset' => 'ORIGINAL')). '</span>';
        }
      }
      $output .=  '</div></li>';
    }
  }
  $output .= '</ul></li>';
  return $output;
}

function ogm_ol_nest_terms($terms) {
  $nest = array();
  foreach ($terms as $term) {
    $vocab = taxonomy_vocabulary_load($term->vid);
    $nest['vocab'] = array('vid' => $term->vid, 'name' => $vocab->name, 'description' => $vocab->description);
    if ($term->depth > 0) {
      $nest[$term->parents[0]][$term->tid]['name'] = $term->name;
      $nest[$term->parents[0]][$term->tid]['desc'] = $term->description;
    }
    else {
      $nest[$term->tid]['name'] = $term->name;
      $nest[$term->tid]['desc'] = $term->description;
    }
  }
  return $nest;
}

function ogm_ol_load_lines_js($node) {
  if ($node->type == 'green_map' && $node->field_use_poly[0]['value'] == 'Yes') {
    // query for lines in a group map
    $lines_query = 'SELECT ct.nid, AsText(ct.field_line_contour_geo) AS geo
      FROM {content_type_green_route} ct
      LEFT JOIN {node} n ON n.nid = ct.nid AND n.vid = ct.vid
      LEFT JOIN {og_ancestry} oga ON ct.nid = oga.nid
      WHERE n.status = %d
      AND n.type = "%s"
      AND oga.group_nid = %d';
    $lines_result = db_query($lines_query, 1, 'green_route', $node->nid);
    $i = 0;
    $lines = array();
    while ($line = db_fetch_array($lines_result)) {
      $lines[$i]['nid'] = $line['nid'];

      // determine the color based on what term the line is
      $tid = db_result(db_query('SELECT tn.tid FROM {term_node} tn LEFT JOIN {term_data} td ON tn.tid = td.tid WHERE tn.nid = %d AND td.vid = %d', $line['nid'], 5));
      $color = ogm_ol_load_poly_colors($tid);

      $lines[$i]['tid'] = $tid;
      if (!is_array($color)) {
        $lines[$i]['color'] = $color;
      }
      else {
        $lines[$i]['color'] = '#000000';
      }
      // and now opacity
      $opacity = ogm_ol_load_line_opacities($tid);
      if (!is_array($line_opacity)) {
        $lines[$i]['line_opacity'] = $line_opacity;
      }
      else {
        $lines[$i]['line_opacity'] = '.5';
      }

      // convert the line info from wkt to an array which can be
      // passed to the DOM via js.
      $points = str_replace('LINESTRING(', '', $line['geo']);
      $points = str_replace(')','', $points);
      $points_arr = explode(',', $points);
      foreach ($points_arr as $key => $value) {
        $coords = explode(' ', $value);
        $lines[$i]['coords'][] = $coords;
      }
      $i++;
    }
    $js_lines_settings = array('ogm_ol_lines' => $lines);
    drupal_add_js($js_lines_settings, 'setting');
    return;
  }
}

function ogm_ol_load_areas_js($node) {
  if ($node->type == 'green_map' && $node->field_use_poly[0]['value'] == 'Yes') {
    // query for areas in a group map
    $areas_query = 'SELECT ct.nid, AsText(ct.field_area_contour_geo) AS geo
      FROM {content_type_green_area} ct
      LEFT JOIN {node} n ON n.nid = ct.nid AND n.vid = ct.vid
      LEFT JOIN {og_ancestry} oga ON ct.nid = oga.nid
      WHERE n.status = %d
      AND n.type = "%s"
      AND oga.group_nid = %d';
    $areas_result = db_query($areas_query, 1, 'green_area', $node->nid);
    $i = 0;
    $areas = array();
    while ($area = db_fetch_array($areas_result)) {
      $areas[$i]['nid'] = $area['nid'];

      // determine the color based on what term the area is
      $tid = db_result(db_query('SELECT tn.tid FROM {term_node} tn LEFT JOIN {term_data} td ON tn.tid = td.tid WHERE tn.nid = %d AND td.vid = %d', $area['nid'], 7));
      $areas[$i]['tid'] = $tid;
      $color = ogm_ol_load_poly_colors($tid);
      if (!is_array($color)) {
        $areas[$i]['color'] = $color;
      }
      else {
        $areas[$i]['color'] = '#000000';
      }
      // and now the opacity
      $line_opacity = ogm_ol_load_line_opacities($tid);
      if (!is_array($line_opacity)) {
        $areas[$i]['line_opacity'] = $line_opacity;
      }
      else {
        $areas[$i]['line_opacity'] = '.3';
      }
      $area_opacity = ogm_ol_load_area_opacities($tid);
      if (!is_array($area_opacity)) {
        $areas[$i]['area_opacity'] = $area_opacity;
      }
      else {
        $areas[$i]['area_opacity'] = '.3';
      }
      // convert the line info from wkt to an array which can be
      // passed to the DOM via js.
      $points = str_replace('POLYGON((', '', $area['geo']);
      $points = str_replace('))','', $points);
      $points_arr = explode(',', $points);
      foreach ($points_arr as $key => $value) {
        $coords = explode(' ', $value);
        $areas[$i]['coords'][] = $coords;
      }
      $i++;
    }
    $js_areas_settings = array('ogm_ol_areas' => $areas);
    drupal_add_js($js_areas_settings, 'setting');
    return;
  }
}