<?php
/**
 * Implementation of hook_perm().
 */
function group_invite_perm() {
  return array('invite using group_invite','administer group_invite');
}

function group_invite_menu($may_cache){
	  $items = array();

  if ($may_cache) {
    // Menu callbacks
	$items[] = array(
      'path' => 'group_invite', 
      'title' => t('Invite new team members'),
      'callback' => 'group_invite_create_group_invite_page',
      'type' => MENU_NORMAL_ITEM,
      'access' => (user_access('invite using group_invite')),
    );
	
	$items[] = array(
      'path' => 'group_invite/submit', 
      'title' => t('Invite'),
      'callback' => 'group_invite_onSubmit',
      'type' => MENU_CALLBACK,
      'access' => (user_access('invite using group_invite')),
    );

	$items[] = array(
      'path' => 'admin/settings/group_invite',
      'title' => t('Group Invite configuration'),
      'description' => t('Configure settings.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'group_invite_admin_settings',
      'access' => user_access('administer group_invite'),
      'type' => MENU_NORMAL_ITEM, // optional
    );
	$items[] = array(
      'path' => 'group_invite/checkemail', 
      'title' => t('Invite'),
      'callback' => 'group_invite_checkEmail',
      'type' => MENU_CALLBACK,
      'access' => (user_access('invite using group_invite')),
    );
	$items[] = array(
      'path' => 'group_invite/getRoles', 
      'title' => t('Invite'),
      'callback' => 'group_invite_getRoles',
      'type' => MENU_CALLBACK,
      'access' => (user_access('invite using group_invite')),
    );
  } else {
  	//membership page and its custom 'invite members' tab
    $gid = arg(2);
    if (arg(0) == 'og' && arg(1) == 'users' && is_numeric($gid)) {
      // group admin only
      $node = node_load($gid);
      $items[] = array('path' => "og/users/$gid/invite_users", 'callback' => 'group_invite_create_group_invite_page', 'title' => t('Invite new members'), 'type' => MENU_LOCAL_TASK, 'weight' => 5, 'access' => og_is_node_admin($node));
    }
  }
  return $items;
}

function group_invite_cron(){
	$group_invite_timestamp = variable_get('group_invite_timestamp', '');
	// 2592000 = 30 days
  if ((time() - $group_invite_timestamp) >= 2592000) {
    db_query('DELETE FROM {group_invite} WHERE created < SUBDATE(NOW(),interval 30 day)');
    variable_set('group_invite_timestamp', time());
  }

}

function group_invite_create_group_invite_page(){
	
	// onChange='Drupal.onChange()'
	
	$js  = "var group_invite_new_team_member = '";
	$js .= "<fieldset class=\\'collapsible\\'>".
				"<legend> " . t('New team member');
	$js .= "</legend>";

	$js .= "<label for=\\'email%NUM%\\'>" . t('Email Address ') . "</label>";
	$js .= "<input type=\\'text\\' onblur=\\'checkEmail(this.value,%NUM%)\\' value=\\'\\' name=\\'email%NUM%\\' id=\\'email%NUM%\\' />";
	$js .= "<input type=\\'hidden\\'  value=\\'\\' name=\\'inDB%NUM%\\' id=\\'inDB%NUM%\\' />";

	$js .= "<div id=\\'DIVemail%NUM%\\'></div>";

	
	$js .= "<fieldset class=\\'collapsible\\'>".
		   "<legend>" . t('Select which map(s) to add the new user to');
	$js .= "</legend>";

	$result =  db_query("SELECT a.title,b.nid FROM {node} AS a LEFT JOIN {og_uid} AS b ON a.nid = b.nid WHERE a.type = 'green_map' AND b.uid = '".$GLOBALS['user']->uid."' AND b.is_admin = '1';");
	while ($map = db_fetch_object($result)) {

		$js .= "<input type=\\'checkbox\\' onClick=\\'selectMap(\\\"".$map->nid."\\\",\\\"%NUM%\\\")\\' value=\\'".$map->nid."\\' name=\\'".$map->nid."map%NUM%\\' id=\\'".$map->nid."map%NUM%\\' />";
		$js .= "<label for=\\'".$map->nid."map%NUM%\\'>".$map->title."</label>";

		$js .= "<div id=\\'DIV".$map->nid."map%NUM%\\'></div>";

	}

	$js .= "</fieldset>";
	$js .= "</fieldset>";
	$js .= "';";
	
	// JS 2
	$js2  = "var group_invite_selectMap = '";
	$js2 .= "<fieldset class=\\'collapsible\\'>".
				"<legend> " . t('Role');
	$js2 .= "</legend>";

	$result =  db_query("SELECT * FROM {role}");
	while ($role = db_fetch_object($result)) {
		if(variable_get('group_invite_role_'.$role->rid, 0) == 0){continue;}

		$js2 .= "<input type=\\'radio\\'  value=\\'".$role->rid."\\' name=\\'%MNUM%role%NUM%\\' id=\\'%MNUM%role%NUM%\\' ";
		if($role->rid==5){
			$js2 .= "checked" ;
		}	
		$js2 .= "/>";
		$js2 .= "<label for=\\'%MNUM%role%NUM%\\'>".$role->name."</label>";

	}
	$js2 .= "</fieldset>";
	$js2 .= "';";
	
	drupal_add_js($js, 'inline');
	drupal_add_js($js2, 'inline');
	$path = drupal_get_path('module', 'group_invite');
	drupal_add_js( 'misc/collapse.js' );
	drupal_add_js( $path.'/ajax.js');
	drupal_add_js( $path.'/group_invite.js','module','footer' );
	
	$content  = "<form action='".base_path()."group_invite/submit' accept-charset='UTF-8' method='POST'>";
	$content .= "<div>";
	$content .= t('Write a message to accompany the email invitation that new members will receive');
	$content .= "</div>";
	$content .= "<textarea name='helloText' id='helloText' cols='60'>";
	$content .= t("User '@user' has invited you to join their team on the Open Green Map.", array('@user' => $GLOBALS['user']->name));
	$content .= "</textarea>";
	$content .= "<div id='group_invite_content'></div>";
	$content .= "<div id = 'goup_invite_add'><a href='#' onClick='Drupal.addFieldset()'>" . t('Add another person') . "</a></div>";
	$content .= "<input type='submit' name='submit' value='Invite'/>";
	$content .= "</form>";
	return $content;
}
function group_invite_checkEmail() {
	global $user;
	if(trim(arg(2)) == ""){die();}
	$email = trim(arg(2));
	if(!preg_match("/^[^@]+@[^@]+\.[a-z]{2,6}$/i",$email)){
		// email string doesn't meet our requirements
		// have to be like (whateva)@(whateva).(2 - 6 characters)
		echo "ERROR";
		die();
	}
	$result =  db_query("SELECT uid FROM {users} WHERE mail = '".$email."';");
	$c = db_fetch_object($result);
	if($result && $c->uid) {
		// email is allerady in the DB
		if($user->uid == $c->uid){
			// it is forbidden users to change their own roles
			echo "ERROR2";
			die();
		}
		echo $c->uid;
	} else {
		// email isn't in the DB
		echo "FALSE";
	}
	die();
}
function group_invite_getRoles() {
	global $user;
	if(trim(arg(2)) == ""){die();}
	$uid = trim(arg(2));
	$result =  db_query("SELECT DISTINCT (our.gid), our.rid FROM {og_users_roles} AS our INNER JOIN {og_uid} AS ou WHERE ou.uid ='".$user->uid."' AND ou.is_admin = '1' AND our.uid='".$uid."';");
	$r = '';
	while($c = db_fetch_object($result)) {
		// <mapNid:role>...
		$r .= "<".$c->gid .":".$c->rid.">";
	}
	echo $r;
	die();
}
function group_invite_admin_settings() {
  $form = array();

  $form['role_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role settings'),
    '#description' => t('What roles can group admins assign to group members.'),
    '#collapsible' => TRUE,
  );
  $result =  db_query("SELECT * FROM {role}");
  while ($role = db_fetch_object($result)) {
	$form['role_settings']['group_invite_role_'.$role->rid] = array(
		'#type' => 'checkbox',
		'#title' => $role->name,
		'#return_value' => 1,
		'#default_value' => variable_get('group_invite_role_'.$role->rid, 0),
	);
  }

  return system_settings_form($form);
}
function group_invite_onSubmit() {
	global $user;
	
	$all = array();
	$tmp = array();
	$tmp['maps'] = array();
	$row = 0;	
	$helloText = trim($_POST['helloText']);
	while(list($k,$v) = each($_POST)){
		if(!preg_match("/^([0-9]*)(email)([0-9]+)$/i",$k,$args) &&
		   !preg_match("/^([0-9]*)(inDB)([0-9]+)$/i",$k,$args) &&
		   !preg_match("/^([0-9]+)(role)([0-9]+)$/i",$k,$args)
		) {continue;}
		
		if($row == 0){
			// avoid empty row
			$tmp = array();
			$tmp['maps'] = array();
			$row = $args[3];
		}
		if($row != $args[3]){
			// when row changes put all datat to $all array
			$all[$row] = $tmp;
			$tmp = array();
			$tmp['maps'] = array();
			$row = $args[3];
		}
		// add data to $tmp
		if($args[2] == 'email' || $args[2] == 'inDB'){
			$tmp[$args[2]] = $v;	
		}
		if($args[2] == 'role'){
			// if map selected (shouldn't be a problem)
			if($_POST[($args[1]."map".$args[3])] == $args[1]){
				// mapId = roleId
				$tmp['maps'][$args[1]] = $v;
			}
		}
	}
	$all[$row] = $tmp;
	
	$success = array();
	$fail = array();
	reset($all);
	while(list($k,$v) = each($all)){
		if(empty($all[$k]['email']) || trim($all[$k]['email']) == '') {continue;}
		if($all[$k]['inDB'] == 1 || $all[$k]['inDB'] == '1'){
			// mail allready exists
			
			$result =  db_query("SELECT uid,name FROM {users} WHERE mail = '".$all[$k]['email']."';");
			$c = db_fetch_object($result);
			if($result && $c->uid) { // should happen everytime
				if($user->uid == $c->uid){continue;} // it is forbidden users to change their own roles
				reset($all[$k]['maps']);
				
				$ul = user_load(array('uid'=>$c->uid));
				$arr = array();
				$arr['roles'] = $ul->roles;
				
				while(list($gid,$rid) = each($all[$k]['maps'])){
					og_save_subscription($gid, $c->uid, array('is_active' => TRUE));
					// first clear all current users roles from the group
					og_user_roles_role_leave($c->uid, $gid);		
					// then insert new roles to the group
					og_user_roles_role_join($c->uid, $rid, $gid);
					
					$arr['roles'][$rid]= $rid;
					
				}
				
				user_save($ul,$arr);
				
				drupal_set_message(t('New roles set to the user '.$c->name));
				$mailkey = "group_invite";
				$subject="open GreenMap invitation";
				$body = $user->name. " has added you to a new map. <br><br>If you have any questions or comments, please email ".$user->mail;
				$from = variable_get('site_mail', ini_get('sendmail_from'));
				$defaults = array(
					'MIME-Version' => '1.0',
					'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
					'Content-Transfer-Encoding' => '8Bit',
					'X-Mailer' => 'Drupal'
					);
				drupal_mail($mailkey, $all[$k]['email'], $subject, $body,$from,$defaults);
			}else {
				watchdog('user', t('Database error on sending invitations.'), array(), WATCHDOG_ERROR);
			}
	
		}
		else {
			// mail doesn't exists (in DB)
			
			// generate code
			$code = md5(date('l jS \of F Y h:i:s A').$all[$k]['email']);
			while(list($gid,$rid) = each($all[$k]['maps'])){
				// insert activation code to mysql table
				$insert =  db_query("INSERT INTO group_invite (nid,code,rid,mail)VALUES (".$gid.",'".$code."',".$rid.",'".$all[$k]['email']."');");
			}
			
			
			$subject = "Invitation to Open Green Map";
			$host  = $_SERVER['HTTP_HOST'];
			$dir   = rtrim(dirname($_SERVER['PHP_SELF']), '/\\');
			$link = l(t("Open Green Map"),"http://".$host.$dir."/"."user/register",null,"code=".$code);
			$body_header = $helloText . t("You can join at the ") . $link . ".";
			$body = $body_header;
			$from = variable_get('site_mail', ini_get('sendmail_from'));
		//	$body = $body_header . $link .  $all[$k]['helloText'];
			$defaults = array(
					'MIME-Version' => '1.0',
					'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
					'Content-Transfer-Encoding' => '8Bit',
					'X-Mailer' => 'Drupal'
					);
			// send mail
			$mail_success = drupal_mail('group_invite-mail', $all[$k]['email'], $subject, $body, $from,$defaults);

			if ($mail_success) {
				watchdog('user', t('Invite mailed at %email.', array('%email' => $all[$k]['email'])));
				drupal_set_message(t('Invite email sent to the address '.$all[$k]['email']));
				$success[$all[$k]['email']] = t('Invite have been sent.');
				//drupal_set_message(t('Invite have been sent.'));
			}
			else {
				watchdog('user', t('Error mailing invite at %email.', array('%email' => $all[$k]['email'])), WATCHDOG_ERROR);
				$fail[$all[$k]['email']] = t('Unable to send mail at %email. Please contact the site admin.',array('%email' => $all[$k]['email']));
		//		drupal_set_message(t('Unable to send mail at %email. Please contact the site admin.',array('%email' => $all[$k]['email'])));
			}
		}
	}
	
	drupal_goto("group_invite");
}

function group_invite_form_alter($form_id, &$form){
//	print $form_id . ' '; // this prints form_id's of all forms on every page - development feature
	// this one is useful for debugging - replace form_id_here with name of form

	switch ($form_id) {
		// USER REGISTER
		case 'user_register':
		//print_r($form);
		unset($form['og_register']);
		// if code is set and code meet code of DB, hide mail and set default value
		if(isset($_GET['code']) && trim($_GET['code']) != '' && count($form['#post']) == 0 ){
			// compare code to data of batabase
			$result =  db_query("SELECT nid,mail FROM group_invite WHERE code = '".trim($_GET['code'])."';");
			$c = db_fetch_object($result);
			if(!$result || !$c->nid) {return;}
			
			$form['mail']['#type'] = 'hidden';
			$form['mail']['#default_value'] = $c->mail;
		//	print_r($form);
		}
		break;
		case 'green_map_node_form':
		//	print_r($form);
			unset($form['og_user_roles_logo']);
			unset($form['og_user_roles_links_gid']);
			unset($form['og_user_roles_nopublic_gid']);
		break;
	}
}

/**
* Implementation of hook_action_info().
*/
function group_invite_action_info() {
  return array(
    'group_invite_register_action' => array(
      'description' => t('Give permissions to the user when registered'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'any' => TRUE
        ),
      ),
  );
}

/**
* Implementation of a Drupal action.
* Blocks the current user.
*/
function group_invite_register_action(&$object, $context = array()) {
  if (isset($object->uid)) {
    $uid = $object->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
  }
  else {
    global $user;
    $uid = $user->uid;
  }
//  echo $uid;
  $result =  db_query("SELECT uid,mail FROM {users} WHERE uid = '".$uid."';");
	if(!$result) {
		watchdog('error', t('Problem with db_query.', null));
		drupal_set_message(t('Problem with database query'));
		return;
	}
	$c = db_fetch_object($result);
	// if no matches, this is not first login or username don't match with DB.
	if(!$c) {
		watchdog('error', t('Problem with db_query, no matches found.', null));
		drupal_set_message(t('Problem with database query: no matches found'));
		return;
	}
	
	// when user is loggin in first time	
	$result =  db_query("SELECT DISTINCT nid, rid FROM group_invite WHERE mail = '".$c->mail."';");
	if(!$result) {
		watchdog('error', t('Problem with db_query. table: group_invite', null));
		drupal_set_message(t('Problem with database query'));
		return;
	}
	
	$ul = user_load(array('uid'=>$c->uid));
	$arr = array();
	$arr['roles']= $ul->roles;
	
	while($ids = db_fetch_object($result)){
		og_save_subscription($ids->nid, $c->uid, array('is_active' => TRUE));
		og_user_roles_role_leave($c->uid, $ids->nid);		
		// then insert new roles to the group
		og_user_roles_role_join($c->uid, $ids->rid, $ids->nid);
		$arr['roles'][$ids->rid]= $ids->rid;
		db_query("DELETE FROM group_invite WHERE mail = '".$c->mail."' AND nid = '".$ids->nid."' AND rid = '".$ids->rid."';");
	}	
	user_save($ul,$arr);
	//roles will be modified only if user is invited (requilar registeration doesn't modify anything)
}

function group_invite_views_default_views(){
	
//  return $views;

}