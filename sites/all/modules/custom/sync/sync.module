<?php
// $Id$

/**
* Display help and module information
* @param path whitch path of the site we're displaying help
* @param arg array that holds the current path as vould be returned from arg() function
* @return help text for the path
*/
function sync_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/modules#sync":
    case "admin/help#sync":
      $output = '<p>'. t("Synchronizes users between greenmap.org and opengreenmap.org") .'</p>';
    break;
    case "user/help#sync":
    break;
  }
  return $output;
} // function sync

function sync_open_mysql_connect($db_user, $db_pass, $db_name, $db_server = 'localhost') {
  $link = mysql_connect($db_server, $db_user, $db_pass);
  if (!$link) {
    watchdog('error', t('Could not connect to database. Synchronisation with Green Map aborted.'));
    return FALSE;
  }
  $db_selected = mysql_select_db($db_name, $link);
    if (!$db_selected) {
      watchdog('error', t("Can't use database. Synchronisation with Green Map aborted."));
      mysql_close($link); // close connect
    return FALSE;
  }
  mysql_set_charset('utf8', $link);
  return $link;
}

function sync_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'update':

      $ogm_uid = $account->uid;
      $ogm_profile_fields_fid = 1;

      $name = (trim($edit['name'])) ? trim($edit['name']) : $account->name;
      $pass = (trim($edit['pass'])) ? md5(trim($edit['pass'])) : $account->pass;
      $mail = (trim($edit['mail'])) ? trim($edit['mail']) : $account->mail;

      // set database variables
	  // sync.inc.php is not in the svn and it's only used for production sites
      include_once('sync.inc.php');

      // if name, pass and email are still the same, do nothing
      if ((trim($edit['name']) == $account->name) &&
          (trim($edit['pass']) == '' || trim($edit['pass']) == NULL) &&
          (trim($edit['mail']) == $account->mail)) {
        return;
      }

      // print_r($account);
      // print_r($edit);

      if (!is_array($account->roles)) {
        watchdog('error', "Unable to get user roles from account. Synchronisation with Green Map aborted for uid $ogm_uid.");
        drupal_set_message(t('Unable to get user roles from account. Synchronisation with Green Map aborted.'), 'error');
        return;
      }

      // user has to be a team leader
      if (count(array_intersect($account->roles, array('team leader'))) == 0) {
        watchdog('notice', "Account not synced during update: uid $ogm_uid is not a lead mapmaker.");
        return;
      }

      // get greenhouse uid from ogm db
      if (!$result = db_query('SELECT value FROM {profile_values} where fid= "%d" AND uid ="%d"', $ogm_profile_fields_fid, $ogm_uid)) {
        watchdog('error', "'Unable to get user profile data from account uid $ogm_uid. Synchronisation with Green Map aborted.");
        drupal_set_message(t('Unable to get user profile data from account. Synchronisation with Green Map aborted.'), 'error');
        return;
      }
      $gm_uid = mysql_fetch_object($result);

      // bail if gm_uid is not set
      if ($gm_uid == NULL || !$gm_uid || $gm_uid == '' || $gm_uid->value == '') {
        watchdog('error', t('Unable to get user profile data from account. Synchronisation with Greenhouse account aborted.'));
        drupal_set_message(t('Unable to get user profile data from account. Synchronisation with Greenhouse account aborted.'), 'error');
        return;
      }

      // connect to gm db
      if (!$link = sync_open_mysql_connect($db_user, $db_pass, $db_name, $db_server)) {
        watchdog('error', "Error U000: Database connection error. Synchronisation with Greenhouse account aborted.");
        drupal_set_message(t('Database connection error. Synchronisation with Greenhouse account aborted.'), 'error');
        return;
      }

      // update gm db
      if ( $pass ) {
        $q = "UPDATE users SET name='$name', pass='$pass', mail='$mail' WHERE uid = {$gm_uid->value}";
      }
      else {
        $q = "UPDATE users SET name='$name', mail='$mail' WHERE uid = {$gm_uid->value}";
      }
      if (!mysql_query($q, $link)) {
        watchdog('error', t('Error U001: Database update failure. Synchronisation with Greenhouse account aborted.'));
        drupal_set_message(t('Database update failure. Synchronisation with Greenhouse account aborted.'), 'error');
        mysql_close($link); // close connect
        return;
      }

      watchdog('notice', t('Synchronisation with Greenhouse Account successfully completed.'));
      drupal_set_message(t('Synchronisation with Greenhouse Account successfully completed.'));

      mysql_close($link); // close connect

    break;

    case 'delete':
      /*
      $greenhouse_uid = $account->uid;
      $greenhouse_profile_fields_fid = 97;

      // set database variables
      require_once('sync.inc.php');

      // check the user role in greenhouse
      if (!is_array($account->roles)) {
        watchdog('error', t('Unable to get user roles from account. Synchronisation with Green Map aborted.'));
        drupal_set_message(t('Unable to get user roles from account. Synchronisation with Green Map aborted.'));
        return;
      }

      // $lapsed_roles = array('lapsed user', 'new unauthenticated user');
      $lapsed_roles = array(5, 6);

      // if 'lapsed user' or 'new unauthenticated user' roles found user is not approved
        $approved_user = (count(array_intersect($edit['roles'], $lapsed_roles)) > 0)?FALSE:TRUE;

      if ($approved_user == FALSE) {
        return;
      }

      // get ogm uid from greenhouse db
      if (!$result = db_query('SELECT value FROM {profile_values} where fid= "%d" AND uid ="%d"', $greenhouse_profile_fields_fid, $greenhouse_uid)) {
        watchdog('error', t('Unable to get user profile data from account. Synchronisation with Green Map aborted.'));
        drupal_set_message(t('Unable to get user profile data from account. Synchronisation with Green Map aborted.'));
        return;
      }

      $gm_uid = mysql_fetch_object($result);

      // if ogm uid alredy exist in greenhouse
      if ($gm_uid == NULL || !$gm_uid || $gm_uid == '' || $gm_uid->value == '') {
        watchdog('error', t('Error D001: Unable to get correct data from the database. Synchronisation with Green Map aborted.'));
        drupal_set_message(t('Unable to get correct data from the database. Synchronisation with Green Map aborted.'));
        mysql_close($link); // close connect
        return;
      }
      if (!$link = sync_open_mysql_connect($db_user, $db_pass, $db_name, $db_server)) {return;}
      // remove all user roles from ogm db
      $q = "DELETE FROM users_roles WHERE uid = '".$gm_uid-value."'";
      if (!mysql_query($q, $link)) {
        watchdog('error', t('Error D002: Unable to delete data from the database. Synchronisation with Green Map aborted.'));
        drupal_set_message(t('Unable to delete data from the database. Synchronisation with Green Map aborted.'));
        mysql_close($link); // close connect
        return;
      }
      watchdog('notice', t('Synchronisation with Green Map successfully completed.'));
      drupal_set_message(t('Synchronisation with Green Map successfully completed.'));
      mysql_close($link);
      */
    break;
  }
}

function sync_fetch_all_gm_maps() {
  require_once('sync.inc.php');
  sync_set_db_authentication($db_user, $db_pass, $db_name);

  if (!$link = sync_open_mysql_connect($db_user,$db_pass,$db_name)) {
    drupal_set_message(t('Database connection failure. Synchronisation with Green Map aborted.'), 'error');
    watchdog('error', t("Error S1: Couldn't do sync_open_mysql_connect in sync.module"));
    return false;
  }

  $query = "SELECT
      n.nid, uid, dst, title, filepath
    FROM
      node n
      INNER JOIN node_content_map n_c_m ON n.vid=n_c_m.vid
      LEFT JOIN files f ON f.fid=n_c_m.field_pdf_of_map_fid
      LEFT JOIN url_alias ON src = CONCAT('node/', n.nid)
    WHERE
      type = 'content_map'
      AND status = 1
    ORDER BY nid";

  if(!$result = mysql_query($query,$link)) {
    watchdog('error', t('Error S2: Database select failure. Synchronisation with Green Map aborted.'));
    drupal_set_message(t('Database update failure. Synchronisation with Green Map aborted.'), 'error');
    mysql_close($link); // close connect
    return false;
  }

  $gm_maps = array();
  db_query('TRUNCATE TABLE {sync_gm_green_maps}');
  
  while ($gm_map = mysql_fetch_object($result)) {
    $gm_maps[] = $gm_map;
    db_query("INSERT INTO {sync_gm_green_maps} (gm_nid, gm_uid, title, filepath, alias) VALUES (%d, %d, '%s', '%s', '%s')", $gm_map->nid, $gm_map->uid, $gm_map->title, $gm_map->filepath, $gm_map->dst);
  }

  mysql_close($link);
}

function sync_fetch_gm_maps($uid = 0) {
  $gm_maps = array();
  $ogm_profile_fields_fid = 1; // the place in OGM that the greenhouse UID is stored
  if (!$uid) {
    return $gm_maps;
  }

  $result = db_query("SELECT u.uid, u.name, pv.value AS gm_uid, gm_nid, title, alias, filepath FROM users u INNER JOIN profile_values pv ON pv.uid=u.uid INNER JOIN sync_gm_green_maps s_g_g_m ON s_g_g_m.gm_uid = pv.value WHERE u.uid = %d AND pv.fid = %d", $uid, $ogm_profile_fields_fid);

  while ($gm_map = db_fetch_object($result)) {
    $gm_maps[] = $gm_map;
  }

  return $gm_maps;
}

function sync_cron() {
  sync_fetch_all_gm_maps();
}

function sync_init() {
  // let's fail more loudly, and earlier
  include_once 'sync.inc.php';
}
