<?php
/**
 * Display help and module information
 * @param path whitch path of the site we're displaying help
 * @param arg array that holds the current path as vould be returned from arg() function
 * @return help text for the path
 */
function gmap_poly_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/modules#gmap_poly":
        //FIXME
    case "admin/help#gmap_poly":
        //FIXME
      break;
    case "user/help#gmap_shapes":
        //FIXME
      break;
  }
  return $output;
}

/**
 * Implementation of hook_field_info().
 */
function gmap_poly_field_info() {
  // each type must be matched in hook_field_settings,
  //   where $op = 'database colums'
  return array(
     // 'type'   =>  arrray( data about type )
    'gmap_poly_geometric_data' =>
      array('label' => t('Google Maps Geometric (Polygon or Line) Data')),
  );
}

//function gmap_poly_field($op, &$node, $field, &$items, $teaser, $page) {
//  switch ($op) {
//    case 'validate':
//    break;
//    case 'sanitize':
//    break;
//  }
//}

/**
 *  implementation of hook_field_settings
 */
function gmap_poly_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
        // types declared in hook_field_info
        $columns = array(
          'value' => array(
            'type' => 'text', 'not null' => FALSE, 'sortable' => FALSE, 'default' => '',
          ),
        );
        return $columns;
      break;
  }
}

/**
 *  implementation of hook_widget_info().
 */
function gmap_poly_widget_info() {
  return array(
    'gmap_poly_line_widget' => array(
      'label' => 'Line',
      'field types' => array('gmap_poly_geometric_data'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'gmap_poly_area_widget' => array(
      'label' => 'Area',
      'field types' => array('gmap_poly_geometric_data')),
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function gmap_poly_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $gmap_poly_modpath = drupal_get_path('module', 'gmap_poly');
  drupal_add_js($gmap_poly_modpath .'/gmap_poly.js', 'module', 'footer');
  drupal_add_css($gmap_poly_modpath . '/gmap_poly_style.css');
  _gmap_doheader();
  // need to get lat, lon & center for map
  $node = $form['#node'];
  if ( is_array($node->og_groups) ) {
    // "current()" returns the first element
    $nodegid = current($node->og_groups);
  }
  $gid = $_GET['gids'][0] ? $_GET['gids'][0] : $nodegid;
  $groupnode = node_load($gid);

  // pass the right settings widget div names to be used by JS
  $mapdiv = 'gmap_poly_map_widget_'. $delta ;

  $fieldname = $field['field_name'];
  $cssfieldname = str_replace('_', '-', $fieldname);
  $textareadiv = 'edit-'. $cssfieldname .'-'. $delta .'-value';

  $gmap_poly_js_settings = array(
    'gmap_poly_widgets' =>
      array( $delta => array(
                         'mapDiv' => $mapdiv, 'fieldDiv' => $textareadiv,
                         'gmap_poly_group_map' => array(
                           'lat' => $groupnode->location['latitude'],
                           'lng' => $groupnode->location['longitude'],
                           'zoom' => $groupnode->field_map_zoom[0]['value'],
                         ),
                       ),
      ),
  );

  drupal_add_js($gmap_poly_js_settings, 'setting');

  switch($field['widget']['type']) {
    case 'gmap_poly_line_widget':
    $element['value'] = array(
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#type' => 'hidden',
        '#prefix' =>
          //the map
          '<div id="'. $mapdiv .'" style="width: auto; height: 450px; "></div>'.
          // some helpful buttons
          gmap_poly_controls($delta),
      );

      return $element;
      break;

    case 'gmap_poly_area_widget':
  //     (code for this widget)
      break;
  }
}

function gmap_poly_controls($delta = 0) {
    //<span class="gmap_poly_toggledraw" id="gmap_poly_controls_toggledraw_'. $delta .'>
  return '
    <div class="gmap_poly_controls" id="gmap_poly_controls_'. $delta .'"
    <span class="gmap_poly_toggledraw">
      <a href="javascript:void(0)" onClick="toggleUserDraw('. $delta .')">Toggle Drawing Tool On/Off</a>
    </span>
    &nbsp; &nbsp;
    <span class="gmap_poly_clear">
      <a href="javascript:void(0)" onClick="clearPoly('. $delta .')">Discard My Changes</a>
    </span>
  ';
}

/**
 * Implementation of hook_content_is_empty().
 */
function gmap_poly_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}
