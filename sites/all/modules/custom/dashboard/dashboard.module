<?php
// $Id$

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function dashboard_theme() {
  return array(
  );
} */

function dashboard_init() {
  // only bother when we are not serving a cached page. check for which function that only exists afterwards
  if (function_exists('drupal_set_content')) {
    // we have to perform a load in order to assure that the $user->og_groups bits are present.
    global $user;
    if ($user->uid) {
      $user = user_load(array('uid' => $user->uid));
    }
    else {
      $user->og_groups = array();
    }
  module_load_include('inc', 'dashboard', 'dashboard_views');
  }
}

/**
* Display help and module information
* @param path whitch path of the site we're displaying help
* @param arg array that holds the current path as vould be returned from arg() function
* @return help text for the path
*/
function dashboard_help($path, $arg){
  $output = '';
  switch($path){
  case "admin/modules#dashboard":
    case "admin/help#dashboard":
   // $output = '<p>'. t("Displays links to created on this date") . '</p>';
    break;
  case "user/help#dashboard":
  break;
  }
  return $output;
} // function dashboard

/**
* hook_perm
*/
function dashboard_perm() {
  return array(
    'import sites',
    'export sites',
  );
}

/**
 *  implementation of hook_menu
 */
function dashboard_menu(){
  $items = array();
  $items['greenmap/suggest'] = array(
    'title' => 'Suggest a Site',
    'access arguments' => array('access content'),
    'page callback' => 'dashboard_suggest_site_world_map',
    'type' => MENU_LOCAL_TASK,
    'weight' => 8
  );
  $items['greenmap/view'] = array(
    'title' => 'World View',
    'access arguments' => array('access content'),
    'page callback' => 'dashboard_view_world_map',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['node/%dashboard_map/dashboard'] = array(
    'title' => 'Map Dashboard',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_leadmapmaker',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8
  );
  $items['node/%dashboard_map/members'] = array(
    'title' => 'Map Team',
    'access callback' => 'dashboard_access_admin_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_members',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['node/%dashboard_map/add'] = array(
    'title' => 'Add a site',
    'access callback' => 'dashboard_access_member_callback',
    'access arguments' => array(1),
    'page callback' => 'dashboard_add',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 12,
  );
  $items['node/%dashboard_map/export'] = array(
    'title' => 'Import/Export',
    'access callback' => 'dashboard_access_admin_callback_export',
    'access arguments' => array(1),
    'page callback' => 'dashboard_import_export',
    'page arguments'=> array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
  );
  return $items;
}

function dashboard_map_load($nid) {
  $map_type = 'green_map';
  if ( is_numeric($nid) &&
       ($node = node_load($nid)) &&
       $node->type == $map_type )
  {
    return $node->nid;
  }
  else  {
    return FALSE;
  }
}

/*
 * hook_menu -calls these functions
 */

function dashboard_suggest_site_world_map() {
  $output = '<p>'. t("Thank you! This World View map is the only Open Green Map which <strong>does not yet accept public site suggestions</strong>.") .'</p>'.
    '<p>'. t('Your suggestions are welcome on any other map. Please click <a href="@maps-link">Maps</a> on the top menu bar and select the map of your city or region. Then, click Suggest a Site.', array('@maps-link' => url('maps'))) .'</p>'.
    '<p>'. t("Another way to get to the map you want: <br> On the World View map, select a green site in your area. Each is linked to its map. Click the blue title by the map symbol near the bottom of the info window.") .'</p>';
  return $output;
}

function dashboard_view_world_map(){
  drupal_goto('greenmap');
}

function dashboard_add($nid){
  drupal_goto('node/add/green_site', 'gids[]=' . $nid);
}

function dashboard_import_export($nid) {
  $content = '';

  if (user_access('export sites')) {
    $content .= "<p><strong>". t("Data Export") ."</strong></p>";
    $content .= "<p>". t("From this page, Mapmakers and Team Coordinators can export all Green Sites on this map as a <abbr title='Comma Separated Variable'>CSV</abbr> file, for use with spreadsheet and database software, or as a <abbr title='Keyhole Markup Language'>KML</abbr> file, for use with mapping applications.  The <abbr title='Comma Separated Variable'>CSV</abbr> file contains the complete data from each site, and the <abbr title='Keyhole Markup Language'>KML</abbr> file contains each site's name, location, a brief description, and a link to this website for users who would like to read the site's full description.  User-contributed information such as photos, videos, comments, and impact statements are not exported.") ."</p>";
    $content .= "<ul><li>".
      t('<a href="@csv_export_link">Export Map Data as <abbr title="Comma Separated Variable">CSV</abbr> file</a> (for use with spreadsheet software such as OpenOffice Calc or Microsoft Excel)', array('@csv_export_link' => url('dashboard/sites/'. $nid .'/map_export.csv')))
      ."</li><li>".
      t('<a href="@kml_export_link">Export Map Data as <abbr title="Keyhole Markup Language">KML</abbr> file</a> or <a href="@kml_export_label_link"><abbr title="Keyhole Markup Language">KML</abbr> file with icon labels</a> (for use with mapping software such as Google Earth)', array('@kml_export_link' => url('dashboard/sites/'. $nid .'/map_export.kml'), '@kml_export_label_link' => url('dashboard/sites/'. $nid .'/map_export_labels.kml')))
      ."</li></ul>";
  }

  if (user_access('import sites')) {
    $content .= "<p><strong>". t("Data Import") ."</strong></p>";
    $content .= "<p>". t("<abbr title='Comma Separated Variable'>CSV</abbr> files having the same format as those produced by the site export feature can be imported in bulk into this map.  If the <strong>Site ID</strong> field is blank, the record will be imported as a new Green Site.  If the <strong>Site ID</strong> field is present and corresponds to a Green Site on this map, that site will be updated with the data from the <abbr title='Comma Separated Variable'>CSV</abbr> file.  Fields left blank in the <abbr title='Comma Separated Variable'>CSV</abbr> file will not be updated.  When importing site data, specify the site location in decimal notation in the fields labelled <strong>Latitude</strong> and <strong>Longitude</strong>. The coordinates are also exported using degrees, minutes, and seconds for your convenience, but these fields are ignored during the import process.") ."</p>";
    $content .= "<p>". t("To import new Green Sites or update existing ones, you should start by exporting your sites using the link above so that you have a file to use as an example.  Prepare your <abbr title='Comma Separated Variable'>CSV</abbr> file using a spreadsheet program, follow the link below, then follow these steps:") ."</p>";
    $content .= "<ol><li>".
      t("Click <em>New Import</em>")
      ."</li><li>".
      t("Click <em>Next</em>")
      ."</li><li>".
      t("Step 1: Select <strong>Green Site</strong> and click <em>Next</em>")
      ."</li><li>".
      t("Step 2: Upload a <abbr title='Comma Separated Variable'>CSV</abbr> file or select one you have already uploaded, and click <em>Next</em>")
      ."</li><li>".
      t("Step 3: Enter the appropriate file format options (if unsure, use the defaults) and click <em>Next</em>")
      ."</li><li>".
      t("Step 4: Select the mapping from <abbr title='Comma Separated Variable'>CSV</abbr> fields to Green Site fields (if unsure, use the defaults) and click <em>Next</em>")
      ."</li><li>".
      t("Step 5: Click <em>Next</em>")
      ."</li><li>".
      t("Step 6: Select field default values (if unsure, make no changes) and click <em>Next</em>")
      ."</li><li>".
      t("Step 7: Click <em>Next</em>")
      ."</li><li>".
      t("Step 8: Click <em>Start Import</em>")
      ."</li></ol>";
    $content .= "<p>". t("When this process finishes, your data import is complete!");
    $content .= "<p>". t("If you see errors at any point, there may be a problem with your <abbr title='Comma Separated Variable'>CSV</abbr> file.  Please stop the import, take a screenshot of the error message, and send it to us with a copy the file you were attempting to import.") ."</p>";
    $content .= "<ul><li>".
      t('<a href="@csv_import_link">Import Map Data from <abbr title="Comma Separated Variable">CSV</abbr> file</a>', array('@csv_import_link' => url('admin/content/node_import')))
      ."</li></ul>";
    $content .= "<p><strong>". t("Character Encoding Notes") ."</strong></p>";
    $content .= "<p>". t('Text in these files is encoding using the Unicode character set UTF-8.  In particular, you may need to set your spreadsheet or GIS software to open the <abbr title="Comma Separated Variable">CSV</abbr> file using UTF-8.  Please make sure the CSV file you upload for import also uses the character set UTF-8.') ."</p>";
  }

  return $content;
}

function dashboard_leadmapmaker($nid){
  $node = node_load($nid);
  drupal_add_js("misc/collapse.js");
  drupal_set_title(t('Map Dashboard for %group', array('%group' => $node->title)));
  $content .= "<p>" . t('Use this page to manage sites on the map. You can also use the <a href="@advanced-mapboard">advanced Map Dashboard</a>, which lets you filter and search.', array('@advanced-mapboard' => url('advanced/' . $node->nid))) . "</p>";

  $views_to_embed = array(
    array(
      'view' => 'dashboard_sites',
      'title' => t('Published Sites') .': ',
      'display' => 'page_1',
    ),
    array(
      'view' => 'dashboard_sites',
      'title' => t('Suggested Sites') .': ',
      'display' => 'page_2',
    ),
    array(
      'view' => 'dashboard_sites',
      'title' => t('Unpublished Sites') .': ',
      'display' => 'page_3',
    ),
    array(
      'view' => 'flagged_sites',
      'title' => t('Flagged Sites') .': ',
      'display' => 'default',
    ),
    array(
      'view' => 'comments',
      'title' => t('Comments') .': ',
      'display' => 'default',
    ),
    array(
      'view' => 'dashboard_multimedia',
      'title' => t('Videos') .': ',
      'display' => 'page_1',
    ),
    array(
      'view' => 'dashboard_photos',
      'title' => t('Photos') .': ',
      'display' => 'page_1',
    ),
    // TODO:
      // add the 'dashboard_list_all_flags' view
  );

  foreach ( $views_to_embed as $ve ) {
    if ( $fun = $ve['access'] ) {
      if ( !($fun()) ) {
        continue;
      }
    }
    $content .= "<h3>".$ve['title']."</h3>";
    $content .= "<div style='overflow:auto;max-height:150px;'>";
    $content .= views_embed_view($ve['view'], $ve['display'], $node->nid);
    $content .= "</div>";
  }
  return $content;
}

/*
 * Redirect admins to the member admin page
 */
function dashboard_members($gid){
  return views_embed_view('dashboard_team', 'page', $gid);
}

/*
 * TODO: check these for correctness
 */
function dashboard_access_admin_callback_export($group_nid = 0) {
  return dashboard_access_admin_callback($group_nid, TRUE);
}

/*
 * TODO: check these for correctness
 */
function dashboard_access_admin_callback($group_nid = 0, $import_export = FALSE) {
  global $user;
  if ( !$user->uid ) {
    return FALSE;
  }
  else if ( ! $group_nid ) {
    return FALSE;
  }
  else {
    if ($import_export && !user_access('export sites')) {
      return FALSE;
    }
    $node = node_load($group_nid);
    return og_is_group_admin($node);
  }
}

function dashboard_access_member_callback($group_nid = 0) {
  global $user;
  if ( !$user->uid ) {
    return FALSE;
  }
  else if ( ! $group_nid ) {
    return FALSE;
  }
  else {
    $node = node_load($group_nid);
    return og_is_group_member($node);
  }
}

/*
 * the old code had !(user_access('create green_site content')), which doesn't
 * work well with the new d6 callback/arguments model
 *
 *  TODO: do something different entirely, because this is convoluted
 */
function dashboard_access_callback_not($acc) {
  return
    ! user_access($acc);
}

function dashboard_views_api() {
  return array('api' => 2.0,);
}
