<?php

// $Id: og_taxonomy_subset.module,v 0.1 2008/03/13 16:39:43 tom_o_t Exp $

/**
 * Implementation of hook_nodeapi().
 *
 * Whenever the green_map content type is created or updated it will create the
 * og_taxonomy in cache
 * But first we need to remove the taxonomy for that map from the cache if it's
 * there so that it is recreated when the map is next viewed
 */

function og_taxonomy_subset_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->type == 'green_map') {
        // remove taxonomy from cache when new map is added or existing map is
        // updated.
        cache_clear_all('og_taxonomy_subset_'. $node->nid, 'cache_og_taxonomy_subset');
      }
      break;
  }
}

/**
 * Change the  primary term form on node/add form
 * Remove all the terms not allowed within this group
 */
function og_taxonomy_subset_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'green_site_node_form') {
    // creates or gets from cache the options for the taxonomy of icons
    // og_taxonomy_subset_get_taxonomy_pruned() only effects exposed filter
    // not sure this is doing anything -- mvc
    // og_taxonomy_subset_get_taxonomy_pruned( $form_id, $form);

    // alter form for adding Map
    $type = $form['type']['#value'];
    $node = $form['#node'];
    // first check if node is being submitted to a group, or is already in a group.
    // if not, we still fix up the primary icon dropdown. this is perhaps not
    // the correct place to do it since it has nothing to do with organic groups
    // but the code was already here.
    $group = og_get_group_context();
    // this returns the $node object for the group
    // copied from primary_term - gets vocabs that are set to use primary_term
    if ($vids = variable_get('pt_vocabs_'. $form['type']['#value'], array())) {
      // go through all taxonomy terms for this type:
      $terms = array();
      if (is_array($form['taxonomy'])) {
        foreach ($form['taxonomy'] as $vid => $vocab) {
          // if the current taxonomy form is one that is set to use primary_term
          if (in_array($vid, $vids)) {
            if (is_array($vocab['#options'])) {
              if ($group) {
                // get taxonomy terms for group for this vocab - this replaces
                // $vocab['#options']
                // might be set via content taxonomy field
                $group_terms_field = $group->field_icons_subset;
                if ($group_terms_field == NULL) {
                  return;
                }
                $group_terms == array();
                if ($group_terms_field[0]['value'] === NULL) {
                  // if the content taxonomy field is empty, check taxonomy
                  // tables for legacy date imported from drupal 5, and
                  // regularize the array so it contains tid's as values
                  foreach ($group->taxonomy as $key => $term) {
                    if ($term->vid == 1) {
                      $group_terms[$term->tid] = $term->tid;
                    }
                  }
                } else {
                  // this was from cck -- regularize this array so it contains
                  // tid's as values
                  foreach ($group_terms_field as $key => $term) {
                    $group_terms[$key] = $term['value'];
                  }
                }
                if (count($group_terms) == 0) {
                  return;
                }
              }
              $options = array();
              // turn these into options
              $this_level = array();
              $this_level[0] = '';
              $this_level[1] = '';
              foreach (taxonomy_get_tree($vid) as $term) {
                if ($term->depth < 2 && $this_level[$term->depth] != $term->name) {
                  // ignore categories
                  $this_level[$term->depth] = str_repeat('--', $term->depth).
                    tt("taxonomy:term:$term->tid:name", $term->name);
                  continue;
                }
                if ($group && !in_array($term->tid, $group_terms)) {
                  continue;
                }
                $choice = new stdClass();
                $choice->option = array($term->tid => tt("taxonomy:term:$term->tid:name", $term->name));
                if ($this_level[0] && $this_level[1]) {
                  $options[$this_level[0]][$this_level[1]][] = $choice;
                }
                elseif ($this_level[0]) {
                  $options[$this_level[1]][] = $choice;
                }
                else {
                  $options[] = $choice;
                }
              }
              $terms +=  $options;
            }
          }
        }
      }
      if (count($terms) == 0) {
        return;
      }
      // stick a <none> value on the front of the array
      array_unshift($terms, t('- None -'));
      $types = node_get_types('names');
      $type = $types[$node->type];

      $form['taxonomy']['primaryterm']['#options'] = $terms;
      $default = primary_term_get_term($form['#node']->vid);
      if ($group && in_array($default, $group_terms)) {
        $form['taxonomy']['primaryterm']['#default_value'] = $default;
      }
      else {
        $form['taxonomy']['primaryterm']['#default_value'] = $default;
      }
    }
  }
}

/**
 * Gets icons for current node when node is a map. Will add and get from cache
 * as necessary.
 *
 * Returns an array of stdClasses in icon hierarchical order where each
 * stdClass has all needed data for that icon.
 */
function og_taxonomy_subset_prune_it() {
  $group = og_get_group_context();
  $nid = $group->nid;

  // This if/else checks cache for node specific icon set, if not will calculate and add to cache
  if ( ($cached = cache_get("og_taxonomy_subset_$nid", 'cache_og_taxonomy_subset')) &&
    !empty($cached->data)) {
    // we never cache translated text so we have to translate it here before
    // returning it
    $terms = array();
    foreach ($cached->data as $term) {
      $term->name = tt("taxonomy:term:$term->tid:name", $term->name);
      $term->description = tt("taxonomy:term:$term->tid:description", $term->description);
      $terms[] = $term;
    }
    return $terms;
  }
  else {
    // ID of icons vocabulary
    $vid = 1;

    // get tree for this vocabulary (need hierarchy )
    $vocab_terms = taxonomy_get_tree($vid);

    // get terms for this node/map/group
    // this is an array of objects, but with tid also as key $group_terms[176][tid] = 174
    //$group_terms = taxonomy_node_get_terms_by_vocabulary($group->nid, $vid);
    $group_terms_field = $group->field_icons_subset;
    $group_terms = array();
    foreach ($group_terms_field as $key => $term) {
      if ($term['value'] === NULL) {
        continue;
      }
      $group_terms[$term['value']] = TRUE;
    }

    if ($group_terms_field[0]['value'] === NULL) {
      // may be legacy data in taxonomy tables
      foreach ($group->taxonomy as $key => $term) {
        if ($term->vid == 1) {
          $group_terms[$term->tid] = TRUE;
        }
      }
      if (count($group_terms) == 0) {
        // if mapmaker has not selected any primary terms return full tree
        // without continuing
        cache_set("og_taxonomy_subset_$nid", $vocab_terms, 'cache_og_taxonomy_subset');
        // we never cache translated text so we have to translate it here before
        // returning it
        $terms = array();
        foreach ($vocab_terms as $term) {
          $term->name = tt("taxonomy:term:$term->tid:name", $term->name);
          $term->description = tt("taxonomy:term:$term->tid:description", $term->description);
          $terms[] = $term;
        }
        return $terms;
      }
    }

    // put image paths in an array
    $image_path_query = db_query( "SELECT ti.* FROM {term_image} ti" );
    $image_paths = array();
    while ($path = db_fetch_object($image_path_query)) {
      $image_paths[$path->tid] = $path->path;
    }

    // first go through vocab_terms and remove all where depth is 2 and key
    // doesn't exist in group_terms
    foreach ($vocab_terms as $key => $term) {
      if ($term->depth > 1) {
        if (!array_key_exists($term->tid, $group_terms)) {
          // delete from array because it's not used
          // $vocab_terms[$key] = NULL;
          unset($vocab_terms[$key]);
        }
      }
    }

    // then go through all where depth is 1, get their children, and see if
    // any of these exist in group_terms. If not then remove them. Add kept
    // ones to separate array
    $category_terms = array();
    foreach ($vocab_terms as $key => $term) {
      if ($term->depth == 1) {
        $child_terms = taxonomy_get_children($term->tid);
        if (array_intersect_key($child_terms, $group_terms)) {
          // add to separate array of used categories - same structure as $group_terms
          $category_terms[$term->tid] = $term->name;
        }
        else {
          // remove from $vocab_terms
          unset($vocab_terms[$key]);
        }
      }
    }

    // then go through all where depth is 0, get their children, and see if
    // any of these exist in the separate array just created. If not then
    // remove them
    foreach ($vocab_terms as $key => $term) {
      if ($term->depth < 1) {
        $child_terms = taxonomy_get_children($term->tid);
        if (!array_intersect_key($child_terms, $category_terms)) {
          // remove from $vocab_terms
          unset($vocab_terms[$key]);
        }
      }
    }

    // take the remaining vocab terms and build an icon list
    $pruned = array();
    $icons_path = variable_get('file_directory_path', 'sites/default/files') .'/'.
      variable_get('taxonomy_image', 'taxonomy_image') .'/';
    foreach ($vocab_terms as $icon) {
      $icon->path = NULL;
      switch ( $icon->depth ) {
        case 0:
          $last_0 = $icon;
          $last_0_check = TRUE;
          break;
        case 1:
          $last_1 = $icon;
          $last_1_check = TRUE;
          break;
        case 2:
          if (array_key_exists( $icon->tid, $group_terms )) {

            if ( $last_0_check ) {
              array_push( $pruned, $last_0 );
              $last_0_check = FALSE;
            }
            if ($last_1_check ) {
              array_push( $pruned, $last_1 );
              $last_1_check = FALSE;
            }

            $icon->path = $image_paths[ $icon->tid ];
            $icon->display_size = getimagesize($icons_path . $icon->path);
            $pruned[] = $icon;
          }
          break;
      }
    }
    // Add icons data to cache
    cache_set('og_taxonomy_subset_'. $nid, $pruned, 'cache_og_taxonomy_subset');
    // we never cache translated text so we have to translate it here before
    // returning it
    $terms = array();
    foreach ($pruned as $term) {
      $term->name = tt("taxonomy:term:$term->tid:name", $term->name);
      $term->description = tt("taxonomy:term:$term->tid:description", $term->description);
      $terms[] = $term;
    }
    return $pruned;
  }
}

/**
 * Gets all the og_taxonomies and prunes them for the indiviual node, saving in cache if needed
 */
function og_taxonomy_subset_get_taxonomy_pruned($form_id, &$form) {

  // print $form_id . ' '; // this prints form_id's of all forms on every page - development feature

  // theme the views filters for the school search
  if ($form_id == 'views_filters' && $form['#view_name'] == 'og_ghp_map') {

    // gets the vocab_terms in less DB heavy way independent from the $form, just using organic groups
    $vocab_terms = og_taxonomy_subset_prune_it();

    // finally go through the trimmed vocab_terms and add to options array
    foreach ($vocab_terms as $term) {

      $choice = new stdClass();
      $choice->option = array($term->tid => str_repeat('--', $term->depth) . t($term->name));
      $options[] = $choice;
    }

    $group_terms = $vocab_terms = $group = '';

    // return all the terms as $options in the filter form
    $form['filter0'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#multiple' => 1,
      '#size' => 10,
      '#weight' => -15,
      '#theme' => 'taxonomy_term_select',
    );

  } // End view type checking IF statement

} // End og_taxonomy_subset_get_taxonomy_pruned
